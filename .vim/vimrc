" Overrides for Git for Windows
set clipboard& wildmode& statusline&

" Define/clear a group for all autocmd's in this file
augroup myvimrc | autocmd! | augroup END

" Window/buffer options
set hidden
set laststatus=2 ruler showcmd
set splitbelow splitright
set number relativenumber
set colorcolumn=+1
set cursorline
set linebreak breakindent showbreak=â†³\ \ \ "
set scrolloff=5
set display=truncate

" Searching
set incsearch hlsearch shortmess-=S
set ignorecase wildignorecase smartcase

" Insert mode
set showmatch
set completeopt=menuone,popup
set backspace=indent,eol

" Formatting
set spellcapcheck=
set autoindent shiftwidth=0 tabstop=4
set formatoptions+=j

" Command mode
set history=1000
set wildmenu

" Look for includes in current dir, all parent dirs, and working dir
set path=.;,,

" Treat ^L as page break
set printoptions+=formfeed:y

" Make the fallback color scheme dark instead of light
" Neovim lacks background color detection, but it defaults to dark anyway
if !has('nvim') && empty(v:termrbgresp) | set background=dark | endif

" No undercurl in Windows Terminal or iTerm2, so fallback to underline
set t_Cs=

" More traditional mouse behavior (click-drag, menus)
set mouse=a mousemodel=popup_setpos
if !has('nvim') | set ttymouse=sgr | endif

" More GUI-like behavior
set title belloff=all lazyredraw

" Improve autocmd responsiveness and disable swap files (save often!)
set updatetime=100 directory=

" Less surprising keyboard behavior
set notimeout ttimeout ttimeoutlen=0

" Create backup files in one place, not in every dir where a file is opened
set backupdir=~/.vim/backup//
call mkdir(&backupdir, 'p', 0700)

" Persistent undo tree
set undodir=~/.vim/undo undofile
call mkdir(&undodir, 'p', 0700)

" Continuous pane boundary
set fillchars+=vert:â”‚

" Mode-dependent cursor shape; assumes default (outside Vim) is blinking bar
set t_SI=[5\ q t_SR=[3\ q t_EI=[1\ q
autocmd myvimrc VimLeave * set t_me=[5\ q

" If installed, use ripgrep to replace external :grep
if executable('rg') | set grepprg=rg\ -Hn | endif

" Make equalalways actually work as advertised when the terminal is resized
autocmd myvimrc VimResized * if &equalalways | wincmd = | endif

" Avoid the annoyance of entering insert mode when file not writeable
autocmd myvimrc BufRead * if &l:readonly | setlocal nomodifiable | endif

" Ensure text width equals window width in terminal normal mode
autocmd myvimrc TerminalWinOpen * setlocal nonumber norelativenumber

" Jump to the last cursor position when re-opening a file
" Adapted from $VIMRUNTIME/defaults.vim
autocmd myvimrc BufReadPost *
\	if line("'\"") >= 1 && line("'\"") <= line('$') && &filetype !~# 'commit'
\	|	normal! g`"
\	| endif

" Set an undo point before deleting a whole line in insert mode
" Stolen from $VIMRUNTIME/defaults.vim
inoremap <C-u> <C-g>u<C-u>

" Auto-insert closing bracket for block
inoremap {<CR> {<CR>}<Esc>O
inoremap [<CR> [<CR>]<Esc>O

" Why isn't this default
nnoremap Y y$

" Shift-less command mode
noremap ; :
tnoremap <C-w>; <C-w>:

" More consistent history navigation
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Quick save file without messing up timestamp
nnoremap <silent> , :<C-u>update<CR>

" Quick hide search result highlighting
nnoremap <silent> <BS> :<C-u>nohlsearch<CR>

" Speedy buffer switching
nnoremap <SPACE> <C-^>

" Speedy window switching
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
tnoremap <C-h> <C-w>h
tnoremap <C-j> <C-w>j
tnoremap <C-k> <C-w>k
tnoremap <C-l> <C-w>l

" Make :terminal easier to escape by assuming there's no other mouse user
tnoremap <ScrollWheelUp> <C-\><C-N>
tnoremap <ScrollWheelDown> <C-\><C-N>
tnoremap <ScrollWheelLeft> <C-\><C-N>
tnoremap <ScrollWheelRight> <C-\><C-N>

" Better FZF versions of Vim menus
nnoremap <silent> <C-n> :<C-u>Buffers<CR>

" Alternative to GFiles: integrate with Fugitive to work better in edge cases
command -bang -nargs=* -complete=dir FugitiveFiles
\	call fzf#run(fzf#wrap('gfiles', fzf#vim#with_preview({
\		'source': FugitiveShellCommand('--no-literal-pathspecs', 'ls-files', '-z', '--', <f-args>),
\		'options': '--read0 --multi --no-clear --prompt=' . shellescape('FugitiveFiles> '),
\		'dir': FugitiveWorkTree(),
\	}), <bang>0))

" FZF in the current project (Git repo if present, otherwise whole directory)
nnoremap <expr> <silent> <C-p> FugitiveIsGitDir() ? ':<C-u>FugitiveFiles<CR>' : ':<C-u>Files<CR>'

" git grep without hit-enter prompt nor jumping to the first match
nnoremap <Leader>gg :<C-u>Ggrep! -q<SPACE>

" Shortcut for git blame
nnoremap <silent> <Leader>b :<C-u>Git blame<CR>

" git grep (i.e. project-wide) analog of * (word search)
nnoremap <silent> <Leader>* :<C-u>Ggrep -q -w -- <cword><CR>
nnoremap <silent> <Leader>g* :<C-u>Ggrep -q -- <cword><CR>

" Add operator for copying to terminal clipboard
nmap <Leader>c <Plug>OSCYankOperator
nmap <Leader>cc <Leader>c_
vmap <Leader>c <Plug>OSCYankVisual

" Linter actions
nmap [r <Plug>(ale_previous)
nmap ]r <Plug>(ale_next)
nmap [R <Plug>(ale_first)
nmap ]R <Plug>(ale_last)

" Missing <Plug> mappings for ALE
nnoremap <silent> <Plug>(ale_find_references_quickfix) :<C-u>ALEFindReferences -quickfix \| cwindow<CR>
vnoremap <silent> <Plug>(ale_code_action) :ALECodeAction<CR>
nnoremap <silent> <Plug>(ale_organize_imports) :<C-u>ALEOrganizeImports<CR>

" IDE actions
autocmd myvimrc User ALELSPStarted call s:ALELSPStarted()
function s:ALELSPStarted()
	nmap <buffer> K <Plug>(ale_hover)
	nmap <buffer> gK <Plug>(ale_documentation)
	nmap <buffer> <C-]> <Plug>(ale_go_to_definition)
	nmap <buffer> <C-w>] <C-w><C-]>
	nmap <buffer> <C-w><C-]> <Plug>(ale_go_to_definition_in_vsplit)
	nmap <buffer> g<C-]> <Plug>(ale_go_to_type_definition)
	nmap <buffer> <C-w>g] <C-w>g<C-]>
	nmap <buffer> <C-w>g<C-]> <Plug>(ale_go_to_type_definition_in_vsplit)
	nmap <buffer> - <Plug>(ale_find_references_quickfix)
	nmap <buffer> + <Plug>(ale_code_action)
	vmap <buffer> + <Plug>(ale_code_action)
	nmap <buffer> <F2> <Plug>(ale_rename)
	nmap <buffer> <S-F2> <Plug>(ale_file_rename)
	nmap <buffer> <Leader>i <Plug>(ale_import)
	nmap <buffer> <Leader>I <Plug>(ale_organize_imports)
	setlocal omnifunc=ale#completion#OmniFunc
endfunction

" IDE actions (project-wide)
nnoremap <Leader>s :<C-u>ALESymbolSearch -relative<SPACE>
nmap <Leader><Leader>s <Plug>(ale_repeat_selection)

" Useful built-in plugins
packadd! cfilter
packadd! matchit

" Enhance manpage integration using the builtin man ftplugin
let g:ft_man_no_sect_fallback = 1
source $VIMRUNTIME/ftplugin/man.vim
set keywordprg=:Man
cnoreabbrev man Man

" Don't need vinegar.vim for this :)
" Also helps to use :Explore rather than :e
let g:netrw_banner = 0

" Open links from WSL
if executable('wslview')
	let g:netrw_browsex_viewer = 'wslview'
endif

" quick-scope plugin
let g:qs_lazy_highlight = 1

" dispatch plugin
let g:dispatch_handlers = ['job', 'headless']

" ALE language server plugin
let g:ale_fix_on_save = 1
let g:ale_lsp_suggestions = 1
let g:ale_completion_enabled = 1
let g:ale_set_balloons = 'hover'
let g:ale_echo_msg_format = '(%linter%) %code: %%s'

" Extend Vim's built-in output code detection for 24-bit color
if empty(&t_8f) && empty(&t_8b)
	set t_8f=[38;2;%lu;%lu;%lum
	set t_8b=[48;2;%lu;%lu;%lum
endif

" Detect 24-bit color according to https://gist.github.com/XVilka/8346728
if $COLORTERM =~? 'truecolor\|24bit' | set t_Co=16777216 | endif

" Use 24-bit color whenever available; the colorscheme MUST define GUI colors
if &t_Co >= 16777216 | set termguicolors | endif

" Most plugins expect filetype to be enabled before syntax
filetype plugin indent on
syntax enable

try
	let g:one_allow_italics = 1
	colorscheme one
	" Without undercurl, color must be set manually (this is orange from One Dark)
	call one#highlight('SpellBad', 'd19a66', '', '')
	call one#highlight('SpellCap', 'd19a66', '', '')
	call one#highlight('SpellLocal', 'd19a66', '', '')
	call one#highlight('SpellRare', 'd19a66', '', '')
catch /^Vim\%((\a\+)\)\=:E185:/
endtry

" Define fallback colors for termdebug plugin that match colorscheme
" Must come after :colorscheme, because some of them call :highlight clear
" Must come before :packadd termdebug, else those (ugly) colors take priority
highlight default link debugPC QuickFixLine
highlight default link debugBreakpoint Debug
