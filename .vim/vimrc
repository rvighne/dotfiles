" Overrides for Git for Windows
set clipboard& wildmode& statusline&

" Define/clear a group for all autocmd's in this file
augroup myvimrc | autocmd! | augroup END

" Window/buffer options
set hidden
set laststatus=2 ruler showcmd
if exists('+showcmdloc') | set showcmdloc=statusline | endif
set splitbelow splitright
set number relativenumber
set colorcolumn=+1
set cursorline
set linebreak breakindent showbreak=â†³\ \ \ "
set scrolloff=5
set display=truncate

" Searching
set incsearch hlsearch shortmess-=S
set ignorecase wildignorecase smartcase

" Insert mode
set showmatch
set completeopt=menuone,popup
set backspace=indent,eol

" Formatting
set spellcapcheck= spelloptions+=camel
set autoindent shiftwidth=0 tabstop=4
set formatoptions+=oj

" Command mode
set wildmenu

" Look for includes in current dir, all parent dirs, and working dir
set path=.;,,

" More useful (but somewhat more expensive) diff
if index(split(&diffopt, ','), 'internal') >= 0
	set diffopt+=algorithm:histogram,indent-heuristic
endif

" Treat ^L as page break
set printoptions+=formfeed:y

" More traditional mouse behavior (click-drag, menus)
set mouse=a mousemodel=popup_setpos
if !has('nvim') | set ttymouse=sgr | endif

" More GUI-like behavior
set title belloff=all lazyredraw

" Improve autocmd responsiveness and disable swap files (save often!)
set updatetime=100 directory=

" Less surprising keyboard behavior
set notimeout ttimeout ttimeoutlen=0

" Skip prompts if it's safe to do so
set autoread autowrite

" Persistent undo tree
set undodir=~/.vim/undo undofile
call mkdir(&undodir, 'p', 0700)

" Maximize sizes of viminfo lists (including :oldfiles)
set history=10000 viminfo='10000,s10,h

" Continuous pane boundary
set fillchars+=vert:â”‚

" Mode-dependent cursor shape; assumes default (outside Vim) is blinking bar
set t_SI=[5\ q t_SR=[3\ q t_EI=[1\ q
autocmd myvimrc VimLeave * set t_me=[5\ q

" If installed, use ripgrep to replace external :grep
if executable('rg') | set grepprg=rg\ --vimgrep | endif

" Make equalalways actually work as advertised when the terminal is resized
autocmd myvimrc VimResized * if &equalalways | wincmd = | endif

" Avoid the annoyance of entering insert mode when file not writeable
autocmd myvimrc BufRead * if &l:readonly | setlocal nomodifiable | endif

" Ensure text width equals window width in terminal normal mode
autocmd myvimrc TerminalWinOpen * setlocal nonumber norelativenumber

" Jump to the last cursor position when re-opening a file
" Adapted from $VIMRUNTIME/defaults.vim
autocmd myvimrc BufReadPost *
\	if line("'\"") >= 1 && line("'\"") <= line('$') && &filetype !~# 'commit'
\	|	normal! g`"
\	| endif

" Set an undo point before deleting a whole line in insert mode
" Stolen from $VIMRUNTIME/defaults.vim
inoremap <C-u> <C-g>u<C-u>

" Auto-insert closing bracket for block
inoremap {<CR> {<CR>}<Esc>O
inoremap [<CR> [<CR>]<Esc>O

" Why isn't this default
nnoremap Y y$

" Avoid getting stuck in ex mode by fat-fingering
" Stolen from $VIMRUNTIME/defaults.vim
noremap Q gq
sunmap Q

" Shift-less command mode
noremap ; :
tnoremap <C-w>; <C-w>:

" Quick save file without messing up timestamp
nnoremap <silent> , :<C-u>update<CR>

" Quick hide search result highlighting
noremap <expr> <BS> execute('nohlsearch')

" Speedy window switching
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
tnoremap <C-h> <C-w>h
tnoremap <C-j> <C-w>j
tnoremap <C-k> <C-w>k
tnoremap <C-l> <C-w>l

" Make :terminal easier to escape by assuming there's no other mouse user
tnoremap <ScrollWheelUp> <C-\><C-N>
tnoremap <ScrollWheelDown> <C-\><C-N>
tnoremap <ScrollWheelLeft> <C-\><C-N>
tnoremap <ScrollWheelRight> <C-\><C-N>

" Follow tags in vertical split instead of horizontal
noremap <C-w>] <C-w>v<C-]>

" Better FZF versions of Vim menus
nnoremap <silent> <C-n> :<C-u>Buffers<CR>
nnoremap <silent> <C-q> :<C-u>History<CR>

" Alternative to GFiles: integrate with Fugitive to work better in edge cases
command -bang -nargs=* -complete=dir FugitiveFiles
\  call fzf#run(fzf#wrap('gfiles', fzf#vim#with_preview(#{
\      source: FugitiveShellCommand('--no-literal-pathspecs', 'ls-files', '-z', '--', <f-args>),
\      options: '--read0 --tiebreak=end,length,index --multi --no-clear --prompt=' . shellescape('FugitiveFiles> '),
\      dir: FugitiveWorkTree(),
\  }), <bang>v:false))

" FZF in the current project (Git repo if present, otherwise whole directory)
nnoremap <expr> <silent> <C-p> FugitiveIsGitDir() ? ':<C-u>FugitiveFiles<CR>' : ':<C-u>Files<CR>'

" git grep without hit-enter prompt nor jumping to the first match
nnoremap <Leader>gg :<C-u>Ggrep! -q<SPACE>

" git grep (i.e. project-wide) analog of * (word search)
nnoremap <silent> <Leader>* :<C-u>Ggrep -q -w -- <cword><CR>
nnoremap <silent> <Leader>g* :<C-u>Ggrep -q -- <cword><CR>

" Shortcut for git blame
noremap <silent> <Leader>b :Git blame -wM<CR>

" Print permalink to current line(s)
noremap <silent> <Leader>f :.GBrowse!<CR>

" Add operator for copying to terminal clipboard
nmap <Leader>c <Plug>OSCYankOperator
nmap <Leader>cc <Leader>c_
vmap <Leader>c <Plug>OSCYankVisual

" dispatch.vim: ensure only one foreground build runs at a time
autocmd myvimrc VimEnter * call s:OverrideDispatchMaps()
function s:OverrideDispatchMaps()
	if exists(':Make') < 2 | return | endif
	cnoreabbrev Make AbortDispatch <bar> Make
	nmap <silent> m<CR> :<C-u>Make<CR>
	nmap m<SPACE> :<C-u>Make<SPACE>
endfunction

" unimpaired.vim-style mappings for diagnostics
nmap [r <Plug>(ale_previous)
nmap ]r <Plug>(ale_next)
nmap [R <Plug>(ale_first)
nmap ]R <Plug>(ale_last)

" Load LSP plugin incompatible with Vim8 and Neovim
if has('vim9script')
	packadd! lsp

	autocmd myvimrc VimEnter * call LspOptionsSet(#{
	\	aleSupport: v:true,
	\	outlineOnRight: &splitright,
	\	outlineWinSize: 40,
	\	usePopupInCodeAction: v:true,
	\	useQuickfixForLocations: v:true,
	\})

	" Commands to jump to other locations
	nnoremap <SPACE> <Cmd>LspSwitchSourceHeader<CR>
	nnoremap <C-s> <Cmd>LspSymbolSearch<CR>
	nnoremap <bar> <Cmd>LspDocumentSymbol<CR>

	" Commands to query current symbol
	nnoremap g< <Cmd>LspSuperTypeHierarchy<CR>
	nnoremap g> <Cmd>LspSubTypeHierarchy<CR>
	nnoremap - <Cmd>LspShowReferences<CR>

	" Refactoring commands
	nnoremap <F2> :<C-u>LspRename<SPACE>
	noremap + <Cmd>LspCodeAction<CR>

	" Create the (global) outline window
	nnoremap <Leader>o <Cmd>LspOutline<CR>

	" Visual mode "text objects"
	vnoremap + <Cmd>LspSelectionExpand<CR>
	vnoremap - <Cmd>LspSelectionShrink<CR>
endif

" Some filetypes set keywordprg in BufRead, so we need to override those
autocmd myvimrc User LspAttached call s:FileTypeLsp() |
\	autocmd FileType <buffer> call s:FileTypeLsp()

" Integrate LSP with Vim builtin features
function s:FileTypeLsp()
	setlocal keywordprg=:LspHover tagfunc=s:LspTagFunc
endfunction

" tagfunc that returns a definitive empty result instead of v:null on failure,
" so that Vim doesn't fall back to its internal (synchronous) tag lookup.
function s:LspTagFunc(pattern, flags, info)
	return lsp#lsp#TagFunc(a:pattern, a:flags, a:info) ?? []
endfunction

" Enable plugins distributed with Vim
packadd! cfilter
packadd! matchit

" Enhance manpage integration using the builtin man ftplugin
let g:ft_man_no_sect_fallback = v:true
source $VIMRUNTIME/ftplugin/man.vim
set keywordprg=:Man
cnoreabbrev man Man

" Builtin plugins
let g:netrw_banner = v:false
let g:termdebug_use_prompt = v:true
let g:termdebug_wide = 1

" ALE language server plugin
let g:ale_disable_lsp = v:true
let g:ale_fix_on_save = v:true
let g:ale_echo_msg_format = '(%linter%) %code: %%s'

" GitGutter plugin
let g:gitgutter_grep = split(&grepprg)[0]
let g:gitgutter_preview_win_floating = v:true

" HighlightedYank plugin
let g:highlightedyank_highlight_in_visual = v:false
let g:highlightedyank_highlight_duration = 125 "ms

" Enable xterm-bracketed-paste and xterm-focus-event in tmux
if &term =~? '^tmux'
	set t_BE=[?2004h t_BD=[?2004l t_PS=[200~ t_PE=[201~
	set t_fe=[?1004h t_fd=[?1004l
	set <FocusGained>=[I <FocusLost>=[O
endif

" Detect 24-bit color according to https://github.com/termstandard/colors
if $COLORTERM =~? 'truecolor\|24bit' | set termguicolors | endif

" Enable 24-bit color if automatically detected by Vim (e.g. for tmux-direct)
if &t_Co >= 16777216 | set termguicolors | endif

" Most plugins expect filetype to be enabled before syntax
filetype plugin indent on
syntax enable

try
	let g:one_allow_italics = v:true
	colorscheme one
	" Without undercurl, color must be set manually (this is orange from One Dark)
	highlight clear SpellBad   | call one#highlight('SpellBad', 'd19a66', '', 'underline')
	highlight clear SpellCap   | highlight default link SpellCap SpellBad
	highlight clear SpellLocal | highlight default link SpellLocal SpellBad
	highlight clear SpellRare  | highlight default link SpellRare SpellBad
catch /^Vim\%((\a\+)\)\=:E185:/
	" Builtin colorscheme that isn't hideous and defines GUI colors
	colorscheme sorbet
endtry

" Regardless of whether terminal uses colors, set bg/fg to match colorscheme
highlight default link Terminal Normal

" Define fallback colors for termdebug plugin that match colorscheme
" Must come after :colorscheme, because some of them call :highlight clear
" Must come before :packadd termdebug, else those (ugly) colors take priority
highlight default link debugPC QuickFixLine
highlight default link debugBreakpoint Debug

" Make HighlightedYank use same color as 'hlsearch', rather than 'incsearch'
highlight default link HighlightedyankRegion Search

" Avoid highlighting nearly all the text in a crontab file
highlight default link crontabCmd Normal
